@model OrderingApplication.Web.ViewModels.Cart.PendingOrders.CartViewModel

@if (!Model.Items.Any())
{
    <div class="alert alert-info" role="alert">
        Your cart is empty. Start shopping now!
    </div>
}
else
{
    <div class="container">
        <h2 class="text-center mt-4 mb-4">Your Shopping Cart</h2>

        @foreach (var item in Model.Items)
        {
            string labelText = "";
            if (item.PriceMode.ToString() == "PerItem")
            {
                labelText = "Quantity";
            }
            else if (item.PriceMode.ToString() == "PerKg")
            {
                labelText = "Kilograms";
            }
            else if (item.PriceMode.ToString() == "PerLiter")
            {
                labelText = "Liters";
            }

            <div class="card mb-3">
                <div class="card-body">
                    <p hidden id="item_@item.Id">@item.Id</p>
                    <h5 class="card-title" id="itemName_@item.Id">@item.Name</h5>
                    <label>@labelText:</label>
                    <p class="card-text" id="itemQuantity_@item.Id">@item.Quantity.ToString("F2")</p>
                    <label>Price: $</label>
                    <p class="card-text" id="itemPrice_@item.Id">@item.Price.ToString("F2")</p>
                    <label>Total: $</label>
                    <p class="card-text" id="itemTotal_@item.Id">@item.Total.ToString("F2")</p>
                    <button class="btn btn-danger" onclick="removeFromCart(@item.Id)">Remove</button>
                </div>
            </div>
        }

        <div class="row total-section mt-4">
            <div class="col-md-12">
                @{
                    decimal VAT = 20;
                }
                <h4>Total Price without VAT: $@Model.Items.Sum(item => item.Total).ToString("F2")</h4>
                <h4>VAT Amount: %@VAT</h4>
                <h4>Total Price with VAT: $@Model.Items.Sum(item => item.TotalWithVAT).ToString("F2")</h4>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-md-6 offset-md-3">
                <h3 class="text-center">Enter Your Information</h3>
                <form onsubmit="submitOrder(event)">
                    <div class="form-group">
                        <label for="name">Name:</label>
                        <input type="text" class="form-control" id="name" name="name" required>
                    </div>
                    <div class="form-group">
                        <label for="address">Address:</label>
                        <input type="text" class="form-control" id="address" name="address" required>
                    </div>
                    <div class="form-group">
                        <label for="city">City:</label>
                        <input type="text" class="form-control" id="city" name="city" required>
                    </div>
                    <div class="form-group">
                        <label for="phone">Phone Number:</label>
                        <input type="tel" class="form-control" id="phone" name="phone" required>
                    </div>
                    <div class="d-flex justify-content-between">
                        <button type="submit" class="btn btn-primary">Place Order</button>
                        <button type="button" class="btn btn-danger" onclick="clearCart()">Clear Cart</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}




<script>
    async function removeFromCart(itemId) {
        if (itemId !== null) {
            // Send a DELETE request to the RemoveItem action
            const response = await fetch('/Cart/RemoveItem', {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ itemId: itemId })
            });

            if (response.ok) {
                console.log('Item deleted from cart:', itemId);
                window.location.href = '/Cart';
            } else {
                console.log('Deleting item from cart failed');
            }
        }
    }


    async function clearCart() {
        fetch('/Cart/ClearCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        })
            .then(response => response.json())
            .then(data => {
                if (data && data.redirectTo) {
                    window.location.reload()
                } else {
                    console.error('Invalid response format.');
                }
            })
            .catch(error => {
                console.error('Error clearing cart:', error);
            });

    }


    async function submitOrder(event) {
        event.preventDefault();
        var orderItems = [];

        // Iterate through the items in the cart and gather data
        var cardElements = document.querySelectorAll('.card');
        cardElements.forEach(async function (cardElement) {
            var itemId = cardElement.querySelector('[id^=item_]').textContent;
            var itemName = cardElement.querySelector('[id^=itemName_]').textContent;
            var quantity = cardElement.querySelector('[id^=itemQuantity_]').textContent;
            var price = cardElement.querySelector('[id^=itemPrice_]').textContent;
            var total = cardElement.querySelector('[id^=itemTotal_]').textContent;

            var orderItem = {
                id: itemId,
                name: itemName,
                quantity: quantity,
                price: price,
                total: total,
                totalWithoutVAT: '0'
            };
            console.log(orderItem);
            orderItems.push(orderItem)
        });

        console.log(orderItems);

        var orderRequest = {
            orderId: generateUniqueId(),
            items: orderItems,
        };

        console.log(orderRequest);

        try {
            const response = await fetch('/CompletedOrders/CompleteOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(orderRequest),
            });

            const data = await response.json();
            console.log('Order placed successfully!', data);
            clearCart();
            alert('Order placed successfully!');
        } catch (error) {
            console.error('Error placing order:', error);
        }
    }


    function generateUniqueId() {
        return Math.random().toString(36).substr(2, 9);
    }
</script>
